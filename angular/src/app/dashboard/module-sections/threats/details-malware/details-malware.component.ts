import { Component, ViewEncapsulation, ChangeDetectorRef, OnInit, OnDestroy } from '@angular/core';
import { Location } from '@angular/common';
import { Router, ActivatedRoute } from '@angular/router';
import { forkJoin as observableForkJoin, BehaviorSubject } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import * as _ from 'lodash';
import { ToastrService } from 'ngx-toastr';

import { MalwareDynamicsService } from './malware-dynamics.service';
import { ResourcesService } from 'app/services/resources.service';
import { OrganizationService } from 'app/dashboard/organization/organization.service';
import { DetailsService } from 'app/dashboard/module-sections/threats/details/details.service';
import { PaginationService } from 'app/dashboard/module-sections/shared/filters/pagination/pagination.service';
import { isEmpty, getHumanReadableDate } from 'app/utils/functions';
import { Store } from 'app/services/store/store';
import { Grants } from 'app/services/grants/grants';
import { DetailsComponent } from 'app/dashboard/module-sections/threats/details/details.component';
import { ModalService } from 'app/dashboard/module-sections/shared/modal/modal.service';
import { ModalTakedownService } from '../../shared/table/table-tools/modal-takedown/modal-takedown.service';
import { ThreatDetailService } from 'app/services/threat-detail.service';

@Component({
  selector: 'app-details-malware',
  templateUrl: './details-malware.component.html',
  styleUrls: ['./details-malware.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class DetailsMalwareComponent extends DetailsComponent implements OnInit, OnDestroy {
  detailMawareInfoStopper: boolean;
  summaryStopper: boolean;
  staticStopper: boolean;
  behaviorStopper: boolean;
  droppedStopper: boolean;
  sharedStopper: boolean;
  basicInfoStopper: boolean;

  // TODO remove comments (only uses fake content)
  comments = [];
  isShow: string;
  networkTabResource: any = {};
  summaryTabResource: any = {};
  staticTabResource: any = {};
  dynamicTabResource: any = {};
  resource: any = {};
  tabData: any = {};
  resourceId: any;
  allLoaded = false;
  resourceArray: any[] = [];
  infoKeysArray: any[] = ['shared', 'basicInfo', 'static', 'dropped', 'behavior'];
  summaryTabResourceSubject = new BehaviorSubject<any>('first');
  staticTabResourceSubject = new BehaviorSubject<any>('first');
  dynamicTabResourceSubject = new BehaviorSubject<any>('first');
  networkTabResourceSubject = new BehaviorSubject<any>('first');
  timeOutSubject = new BehaviorSubject<any>('first');
  languages = [];
  openDefaultModal = false;
  affectedFields = [];
  private id: string;

  constructor(
    resourcesService: ResourcesService,
    route: ActivatedRoute,
    public malwareDynamicsService: MalwareDynamicsService,
    router: Router,
    organizationService: OrganizationService,
    detailsService: DetailsService,
    paginationService: PaginationService,
    cd: ChangeDetectorRef,
    store: Store,
    grants: Grants,
    modalService: ModalService,
    private location: Location,
    protected modalTakedownService: ModalTakedownService,
    toastrService: ToastrService,
    threatDetailService: ThreatDetailService
  ) {
    super(
      resourcesService,
      route,
      organizationService,
      router,
      detailsService,
      paginationService,
      cd,
      store,
      grants,
      modalService,
      modalTakedownService,
      toastrService,
      threatDetailService
    );
  }

  ngOnInit() {
    super.ngOnInit();
    this.tabsData();
  }

  ngOnDestroy() {
    super.ngOnDestroy();
  }

  onToggleModal() {
    this.openDefaultModal = !this.openDefaultModal;
  }

  tabsData() {
    this.setTabData();
    this.isShow = 'Summary';
  }

  setTabData() {
    this.tabData = {
      Summary: {},
      Static: {},
      Dynamic: {},
      Network: {}
    };
  }

  selectImport(key: string) {
    this.isShow = key;
  }

  setLabels() {
    this.setStoreListener((resources) => {
      this.resources = resources;
      const resource = resources.list.find((r) => {
        return r.checkbox;
      });
      if (resource) {
        this.setLabelsHeader(resource.labels);
      }
    });
  }

  setStoreListener(cb) {
    this.store
      .select('resourcesList')
      .pipe(takeUntil(this.destroy$))
      .subscribe((resources: any) => {
        if (resources && resources.list && resources.list.length > 0 && this.resource && this.resource.header) {
          cb(resources);
        }
      });
  }

  setPaginatedResources() {
    this.paginationService.paginatedResources$.pipe(takeUntil(this.destroy$)).subscribe((items) => {
      this.paginatedResourcesIds = items
        .filter((item) => {
          return item && item.id;
        })
        .map((item) => item.id);
    });
  }

  navigateDetails(direction) {
    this.malwareDynamicsService.deselect();
    this.showNavigation = false;
    const ids = this.paginatedResourcesIds;
    const index = _.indexOf(ids, this.resource.id);
    this.showNext = true;
    this.showPrev = true;
    if (direction === 'previous') {
      this.resourceId = ids[index - 1];
      if (index <= 1) {
        this.showPrev = false;
      }
    } else if (direction === 'next') {
      this.resourceId = ids[index + 1];
      if (ids.length - 2 <= index) {
        this.showNext = false;
      }
    }
    if (this.resourceId === undefined) {
      this.router.navigate(
        [`/dashboard/organizations/${this.activeModule.organizationId}/modules/${this.activeModule.id}`],
        { queryParams: { page: this.currentPage } }
      );
    } else {
      this.loadResource();
      this.onChangeMarkAsRead(true, this.resourceId);
      this.location.replaceState(
        `/dashboard/organizations/${this.activeModule.organizationId}/modules/${this.activeModule.id}/resource/malware/${this.resourceId}`,
        `page=${this.currentPage}`
      );
      this.showNavigation = true;
    }
  }

  resetSoppers() {
    this.detailMawareInfoStopper = false;
    this.summaryStopper = false;
    this.basicInfoStopper = false;
    this.staticStopper = false;
    this.behaviorStopper = false;
    this.droppedStopper = false;
    this.sharedStopper = false;
  }

  resetTabsResources() {
    this.resource = {};
    this.isShow = 'Summary';
    this.networkTabResource = {};
    this.summaryTabResource = {};
    this.staticTabResource = {};
    this.dynamicTabResource = {};
  }

  resetSubjects() {
    this.summaryTabResourceSubject.next('first');
    this.staticTabResourceSubject.next('first');
    this.dynamicTabResourceSubject.next('first');
    this.networkTabResourceSubject.next('first');
  }

  resetTimeOuts() {
    this.timeOutSubject.next('stopper');
  }

  setResource() {
    this.resource.id = this.resourceId ? this.resourceId : +this.route.snapshot.params['id'];
    this.resource.checked = true;
    this.resource.labels = this.resource.header.labels;
    this.resourceArray = [this.resource];
  }

  setLabelsHeader(labls) {
    this.resource.header['labels'] = labls;
    this.resource = JSON.parse(JSON.stringify(this.resource));
    if (!this.cd.detectChanges['destroyed']) {
      this.cd.detectChanges();
    }
  }

  setResourceHeader() {
    this.resource.header = {
      submitted: this.resource.basicInfo ? getHumanReadableDate(this.resource.basicInfo.uploadDate) : '-',
      fileType:
        this.resource.shared && this.resource.shared.target && this.resource.shared.target.file.type
          ? this.resource.shared.target.file.type
          : '-',
      architecture:
        this.resource.basicInfo && this.resource.basicInfo.architecture ? this.resource.basicInfo.architecture : '-',
      size: this.resource.basicInfo && this.resource.basicInfo.fileSize ? this.resource.basicInfo.fileSize : '-',
      malware:
        this.resource.detailMalware && this.resource.detailMalware.malwareType
          ? this.resource.detailMalware.malwareType
          : '-',
      severity:
        this.resource.basicInfo && this.resource.detailMalware.severity !== null
          ? this.resource.detailMalware.severity
          : '-',
      labels: this.resource.detailMalware.labels ? this.resource.detailMalware.labels : [],
      search_words: this.resource.detailMalware.searchPhrase ? this.resource.detailMalware.searchPhrase : '-',
      md5:
        this.resource.shared &&
        this.resource.shared.target &&
        this.resource.shared.target.file &&
        this.resource.shared.target.file.md5
          ? this.resource.shared.target.file.md5
          : '-',
      sha1:
        this.resource.shared &&
        this.resource.shared.target &&
        this.resource.shared.target.file &&
        this.resource.shared.target.file.sha1
          ? this.resource.shared.target.file.sha1
          : '-',
      sha256:
        this.resource.shared &&
        this.resource.shared.target &&
        this.resource.shared.target.file &&
        this.resource.shared.target.file.sha256
          ? this.resource.shared.target.file.sha256
          : '-',
      ssdeep:
        this.resource.shared &&
        this.resource.shared.target &&
        this.resource.shared.target.file &&
        this.resource.shared.target.file.ssdeep
          ? this.resource.shared.target.file.ssdeep
          : '-',
      languages: this.languages
    };
  }

  setResourceAndStaticTabAndNetworkTabFromShared(res) {
    this.networkTabResource = res && !isEmpty(res) && res.network && !isEmpty(res.network) ? res.network : null;
    this.networkTabResourceSubject.next(this.networkTabResource);

    this.resource.shared = res && !isEmpty(res) ? res : null;
    const tempObj = res && !isEmpty(res) ? res : null;
    for (const p in tempObj) {
      if (p) {
        this.staticTabResource[p] = tempObj[p];
        this.summaryTabResource[p] = tempObj[p];
      }
    }

    this.sharedStopper = true;
    if (this.basicInfoStopper && this.detailMawareInfoStopper) {
      this.setResourceHeader();
      this.setResource();
      this.loadLabels(this.resource.id);
      this.setPrevNextOnLoad();
    }
    if (this.basicInfoStopper && this.staticStopper) {
      this.staticTabResourceSubject.next(this.staticTabResource);
    }
    if (this.summaryStopper) {
      this.summaryTabResourceSubject.next(this.summaryTabResource);
    }
  }

  setResourceFromBasicInfo(res) {
    this.resource.basicInfo = res && !isEmpty(res) ? res : null;
    this.basicInfoStopper = true;
    if (this.sharedStopper && this.detailMawareInfoStopper) {
      this.setResourceHeader();
      this.setResource();
      this.loadLabels(this.resource.id);
      this.setPrevNextOnLoad();
    }
    this.staticTabResource.fileSize = res && res.fileSize ? res.fileSize : '-';
    if (this.sharedStopper && this.staticStopper) {
      this.staticTabResourceSubject.next(this.staticTabResource);
    }
  }

  setSummaryTab(res) {
    const tempObj = res && !isEmpty(res) ? res : null;
    for (const p in tempObj) {
      if (p) {
        this.summaryTabResource[p] = tempObj[p];
      }
    }
    this.summaryStopper = true;
    if (this.sharedStopper) {
      this.summaryTabResourceSubject.next(this.summaryTabResource);
    }
  }

  setStaticTab(res) {
    const tempObj = res && !isEmpty(res) ? res : null;
    for (const p in tempObj) {
      if (p) {
        this.staticTabResource[p] = tempObj[p];
      }
    }
    this.staticStopper = true;
    if (this.sharedStopper && this.basicInfoStopper) {
      this.staticTabResourceSubject.next(this.staticTabResource);
    }
  }

  setDynamicTabFromDopped(res) {
    const tempObj = res && !isEmpty(res) ? res : null;
    for (const p in tempObj) {
      if (p) {
        this.dynamicTabResource[p] = tempObj[p];
      }
    }
    this.droppedStopper = true;
    if (this.behaviorStopper) {
      this.dynamicTabResourceSubject.next(this.dynamicTabResource);
    }
  }

  setDynamicTabFromBehavior(res) {
    const tempObj = res && !isEmpty(res) ? res : null;
    for (const p in tempObj) {
      if (p) {
        this.dynamicTabResource[p] = tempObj[p];
      }
    }
    this.behaviorStopper = true;
    if (this.droppedStopper) {
      this.dynamicTabResourceSubject.next(this.dynamicTabResource);
    }
  }

  deleteThreat() {
    this.detailsService
      .deleteThreats([this.resource.id])
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.router.navigate(
          [`/dashboard/organizations/${this.activeModule.organizationId}/modules/${this.activeModule.id}`],
          { queryParams: { page: this.currentPage } }
        );
      });
  }

  onClickCloseComments() {
    this.isPreviewOpened = false;
    this.malwareDynamicsService.isSelected = false;
    this.malwareDynamicsService.isFromDetail = true;
  }

  isIssued() {
    return this.resource && this.resource.detailMalware && this.resource.detailMalware.issued;
  }

  onClickIssue() {
    if (!this.grants.isCustomer()) {
      if (!this.resource.detailMalware.issued) {
        this.isAddIncidentModalOpen = true;
      } else {
        this.resourcesService.setResourceIssueSubject(this.resource);
        this.isViewIncidentModalOpen = true;
      }
    }
  }

  isFav() {
    return this.resource && this.resource.detailMalware && this.resource.detailMalware.starredStatus == 'USER_STARRED';
  }

  onChangeMarkAsFavorite() {
    const value = this.resource.detailMalware.starredStatus === 'NOT_STARRED' ? 'USER_STARRED' : 'NOT_STARRED';
    const { id } = this.resource;

    this.resourcesService
      .markAsFav(this.activeModule.id, this.activeModule.moduleName, id, value)
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        if (this.isFav()) {
          this.resource.detailMalware.starredStatus = 'NOT_STARRED';
        } else {
          this.resource.detailMalware.starredStatus = 'USER_STARRED';
        }
      });
  }

  updateComments(num) {
    this.commentsNum = num;
  }

  parseAffectedFields(affected: any) {
    if (affected) {
      Object.entries(affected).forEach?.((entry) => {
        const [key, value]: any = entry;
        const obj = { domain: key, affectedFields: value.affectedFields };
        this.affectedFields.push(obj);
      });
    }
  }

  protected loadResource() {
    const requests = [];
    this.resetSoppers();
    this.resetTabsResources();
    this.resetSubjects();
    this.resetTimeOuts();
    const resourceId = this.resourceId ? this.resourceId : this.route.snapshot.params['id'];
    this.resourcesService
      .getlanguagesList()
      .pipe(
        takeUntil(this.destroy$),
        switchMap((res) => {
          this.languages = res;
          // call the resource endpoint
          return this.resourcesService.getResource(this.activeModule.id, this.activeModule.moduleName, resourceId);
        }),
        switchMap((res) => {
          this.parseAffectedFields(res?.affectedFields);
          this.resource.detailMalware = res;
          this.detailMawareInfoStopper = true;
          if (this.sharedStopper && this.basicInfoStopper) {
            this.setResourceHeader();
            this.setResource();
            this.loadLabels(this.resource.id);
            this.setPrevNextOnLoad();
          }

          return this.resourcesService.getResourceMalware(
            this.activeModule.id,
            this.activeModule.moduleName,
            resourceId,
            'summary'
          );
        })
      )
      .subscribe((res) => {
        this.setSummaryTab(res);

        this.infoKeysArray.forEach((infoKey) => {
          if (infoKey === 'basicInfo') {
            infoKey = 'basic-info';
          }

          requests.push(
            this.resourcesService.getResourceMalware(
              this.activeModule.id,
              this.activeModule.moduleName,
              resourceId,
              infoKey
            )
          );
        });

        observableForkJoin(requests)
          .pipe(takeUntil(this.destroy$))
          .subscribe(([shared, basicInfo, statico, dropped, behaivor]) => {
            this.allLoaded = true;

            this.setResourceAndStaticTabAndNetworkTabFromShared(shared);
            this.setResourceFromBasicInfo(basicInfo);
            this.setStaticTab(statico);
            this.setDynamicTabFromDopped(dropped);
            this.setDynamicTabFromBehavior(behaivor);
          });
      });
  }

  protected setPrevNextOnLoad() {
    const ids = this.paginatedResourcesIds;
    if (ids?.length > 0) {
      const index = _.indexOf(ids, this.resource.id);
      if (ids.length - 1 === index) {
        this.showNext = false;
        this.showPrev = true;
      } else if (index <= 0) {
        this.showPrev = false;
        this.showNext = true;
      } else {
        this.showNext = true;
        this.showPrev = true;
      }
    }
  }
}
