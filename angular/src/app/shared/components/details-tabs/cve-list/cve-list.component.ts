import { take, finalize, takeUntil } from 'rxjs/operators';
import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { OrganizationService } from '../../../../dashboard/organization/organization.service';
import { ServerList } from '../../../cs/server-list';
import { NewTabService } from 'app/services/new-tab.service';
import { convertToCSV, exportClientFile } from '../../../../utils/functions';
import * as moment from 'moment';
import { ThreatContextNavigationService } from '../../threat-context-navigation/threat-context-navigation.service';

@Component({
  selector: 'cve-list',
  templateUrl: './cve-list.component.html',
  styleUrls: ['./cve-list.component.scss']
})
export class CveListComponent extends ServerList implements OnInit, OnDestroy {
  @Input() source;
  orgId;
  moduleId;

  constructor(
    private organizationService: OrganizationService,
    private threatContextNavigationService: ThreatContextNavigationService,
    private newTabService: NewTabService
  ) {
    super();
  }

  ngOnInit(): void {
    this.organizationService
      .getCurrentContext()
      .pipe(takeUntil(this.destroy$), take(1))
      .subscribe((context) => {
        this.moduleId = context.currentModule.id;
        this.orgId = context.currentOrganization.id;
      });
    this.reloadData();
  }

  ngOnDestroy() {
    super.ngOnDestroy();
  }

  details(event, { id, name }) {
    if (event.target.type === 'checkbox' || event.target.className.includes('icon-copy')) {
      return;
    }
    const url = this.getDetailsLink(id);
    const navigation = this.threatContextNavigationService.getNavigation(name, `cves/${id}`);
    this.newTabService.openNewTab(event, url, { navigation });
  }

  preventDefault(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  exportToCSV() {
    const items = this.getExportableData(this.getCheckedItems());
    exportClientFile(convertToCSV(items), 'cves');
  }

  exportToJson() {
    const items = this.getExportableData(this.getCheckedItems());
    exportClientFile(JSON.stringify(items), 'cves', 'json');
  }

  getDetailsLink(id) {
    return `/dashboard/organizations/${this.orgId}/modules/${this.moduleId}/threat_context/cves/${id}`;
  }

  reloadData(config?: any) {
    const params = { limit: this.limit, page: this.page, sort: '-bl_score,-published_at' };
    this.loading = true;
    const source$ = this.source(params);
    source$
      .pipe(
        takeUntil(this.destroy$),
        take(1),
        finalize(() => (this.loading = false))
      )
      .subscribe(({ data, meta }) => {
        if (data) {
          this.bulk = false;
          this.items = data.map((item) => {
            return {
              ...item.attributes,
              id: item.id,
              bl_score:
                item.attributes && item.attributes.bl_score && item.attributes.bl_score > 0
                  ? item.attributes.bl_score
                  : false,
              mentionsCount:
                item.relationships && item.relationships.mentions && item.relationships.mentions.meta
                  ? item.relationships.mentions.meta.count
                  : 0,
              exploitsCount:
                item.attributes.exploits && item.attributes.exploits.length ? item.attributes.exploits.length : 0,
              platformsCount:
                item.attributes.platforms && item.attributes.platforms.length ? item.attributes.platforms.length : 0,
              msBulletinsCount:
                item.attributes.microsoft_bulletins && item.attributes.microsoft_bulletins.length
                  ? item.attributes.microsoft_bulletins.length
                  : 0
            };
          });
          if (meta) {
            this.count = meta.pagination.count;
          }
        }
      });
  }

  private getExportableData(items) {
    return items.map((item) => {
      return {
        SCORE: item.bl_score || 'N/A',
        NAME: item.name,
        EXPLOITS: item.exploitsCount || 0,
        MALWARE: item.num_malware || 0,
        MENTIONS: item.mentionsCount || 0,
        PLATFORMS: item.platformsCount || 0,
        'MS BULLETINS': item.msBulletinsCount || 0,
        'PUBLICATION DATE': moment(item.published_at, 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY')
      };
    });
  }
}
