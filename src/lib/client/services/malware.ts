import type { GetCVEFilters } from '$lib/types/explorer';
import type { TCXCVESingleResponse } from '$lib/types/tcx';
import axios from 'axios';
import Service from '.';
import type { TermsType } from './modules';
import type { GenericResponseType } from './types';

export type DownloadAllCVEInput = {
  startScore?: number;
  endScore?: number;
  q?: string;
  read?: 0 | 1 | 2;
  terms?: string; //id,id
  priority?: string; //id,id
};

export type PriorityCVE = 'TRIVIAL' | 'MINOR' | 'MEDIUM' | 'MAJOR' | 'CRITICAL';
export type CVE = {
  countAffectedPlatforms: number;
  cpe: string;
  cve: string;
  id: number;
  priority: PriorityCVE;
  product: string;
  publishedAt: number;
  read: boolean;
  scoring: number;
  vendor: string;
  version: string;
  labels: CVELabel[];
};
export type CVELabel = {
  id: number;
  name: string;
  background_color: number;
  text_color: number;
  type: string;
};

export type CVEResponse = {
  total_resources: number;
  list: CVE[];
};

export default class MalwareService extends Service {
  getCVES(orgId: number, moduleId: number, params: GetCVEFilters) {
    const url = `/api/v2/organization/${orgId}/module/${moduleId}/explorer/resource/cves`;
    return this.client.get<CVEResponse>(url, { params });
  }

  async getCVE(orgId: number, moduleId: number, cveId: number) {
    const url = `/api/v2/organization/${orgId}/module/${moduleId}/explorer/resource/cves/${cveId}`;
    const response = await this.client.get<{
      resourceData: CVE;
      data: {
        attributes: TCXCVESingleResponse['data']['attributes'];
        relationships: TCXCVESingleResponse['data']['relationships'];
      };
    }>(url);
    return response.data;
  }

  async getTerms(organizationId: number, moduleId: number) {
    const url = `/api/v2/organization/${organizationId}/module/${moduleId}/explorer/resource/cves/terms`;
    const response = await this.client.get<TermsType[]>(url);
    return response.data;
  }

  async setCvePriority(organizationId: number, moduleId: number, priority: number, resources: number[]) {
    const url = `/api/v2/organization/${organizationId}/module/${moduleId}/explorer/resource/cves`;
    const data = {
      priority,
      resources
    };
    const response = await this.client.patch<GenericResponseType>(url, data);
    return response.data;
  }

  async markAsRead(organizationId: number, moduleId: number, resources: number[], read: boolean) {
    // Prevent cancel request when client is aborted when moving pages
    const cancelToken = axios.CancelToken.source().token;

    const url = `/api/v2/organization/${organizationId}/module/${moduleId}/explorer/resource/cves/markAs`;
    const data = {
      read,
      resources
    };
    const response = await this.client.put<GenericResponseType>(url, data, { cancelToken });
    return response.data;
  }

  async exportCve(organizationId: number, moduleId: number, resources: number[]) {
    const url = `/api/v2/organization/${organizationId}/module/${moduleId}/explorer/resource/cves/export`;
    const { data, status } = await this.client.post(url, resources, {
      responseType: 'blob'
    });
    this.openFile(data, status);
  }

  async exportAllCve(organizationId: number, moduleId: number, filters: DownloadAllCVEInput) {
    const url = `/api/v2/organization/${organizationId}/module/${moduleId}/explorer/resource/cves/export/all`;
    const { data, status } = await this.client.get(url, { params: filters, responseType: 'blob' });
    this.openFile(data, status);
  }

  async deleteCve(organizationId: number, moduleId: number, resources: number[]) {
    const url = `/api/v2/organization/${organizationId}/module/${moduleId}/explorer/resource/cves`;
    const response = await this.client.put<GenericResponseType>(url, resources);
    return response.data;
  }
}
