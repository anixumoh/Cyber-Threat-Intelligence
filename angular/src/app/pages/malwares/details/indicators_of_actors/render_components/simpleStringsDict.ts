import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, take } from 'rxjs/operators';
import { OrganizationService } from '../../../../../dashboard/organization/organization.service';

@Component({
  selector: 'strings-dict',
  templateUrl: './simpleStringsDict.html',
})
export class SimpleStringsDict implements OnInit, OnDestroy {
  @Input() key = undefined;
  @Input() value = undefined;
  @Input() parentKey = undefined;

  activeModule;
  activeOrganization;

  strDict;
  complete_key;
  private readonly destroy$ = new Subject<void>();

  constructor(private organizationService: OrganizationService) {}

  ngOnInit() {
    this.organizationService
      .getCurrentContext()
      .pipe(takeUntil(this.destroy$), take(1))
      .subscribe((context) => {
        this.activeModule = context.currentModule;
        this.activeOrganization = context.currentOrganization;
      });

    this.process_dict();
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  getQueryParams(key, value) {
    return { dork: `ioa.${key}.keyword:"${value}"` };
  }

  private process_dict() {
    this.strDict = this.value;
    this.complete_key = this.parentKey ? this.parentKey + '.' + this.key : this.key;
  }
}
