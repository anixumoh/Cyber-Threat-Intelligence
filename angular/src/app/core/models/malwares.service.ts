import { Injectable } from '@angular/core';
import { of as observableOf, Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { HttpUtilsService, path, RequestOptions } from '../../services/http-utils.service';
import * as FileSaver from 'file-saver';
import { IQuerystringsParams, ThiappGateway } from './thiapp.gateway';

@Injectable()
export class MalwaresService {
  constructor(private http: HttpUtilsService, private thiappGateway: ThiappGateway) {}

  fullList(params: IQuerystringsParams) {
    const queryString = this.thiappGateway.getQuerystring(params);
    const url = `/malware/?${queryString}`;
    return this.thiappGateway.get({ url });
  }

  list({ organizationId, moduleId, params }) {
    return this.http.get(
      `${path}/organization/${organizationId}/module/${moduleId}/threat_context/malware/resource`,
      new RequestOptions({ params })
    );
  }

  getIndicatorsByDomain(domain) {
    const querystring = this.thiappGateway.getQuerystring({ limit: 10, filterField: 'value', filterValue: domain });
    const url = `/indicator/?${querystring}`;
    return this.thiappGateway.get({ url });
  }

  getProcessTree(sha256) {
    const url = `/malware/${sha256}/report/process-tree/`;
    return this.thiappGateway.get({ url });
  }

  behavior() {
    return observableOf({
      links: { first: null, last: null, next: null, prev: null },
      data: [],
      meta: { pagination: { count: 0, limit: 50, offset: 0 } },
    });
  }

  behaviorDetails(sha256, pid) {
    const url = `/malware/${sha256}/report/behavior/${pid}/`;
    return this.thiappGateway.get({ url });
  }

  source(sha256) {
    const querystring = this.thiappGateway.getQuerystring({ limit: 10 });
    const url = `/malware/${sha256}/source/?${querystring}`;
    return this.thiappGateway.get({ url });
  }

  details(sha256) {
    const url = `/malware/${sha256}/report/`;
    return this.thiappGateway.get({ url });
  }

  apiCalls({ malwareId, category, pid, search, limit, page }) {
    const querystring = this.thiappGateway.getQuerystring({ category, page, pid, search, limit });
    const url = `/malware/${malwareId}/report/behavior/call/?${querystring}`;
    return this.thiappGateway.get({ url });
  }

  reanalyzeSample(hash: string) {
    const url = `/malware/${hash}/reanalyze/`;
    return this.thiappGateway.get({ url });
  }

  downloadReport(hash: string): Observable<any> {
    const url = `/malware/${hash}/report/download/`;
    const filename = 'report_' + hash + '.json';
    return this.download(url, filename);
  }

  downloadSample(hash: string) {
    const url = `/malware/${hash}/sample/`;
    const filename = 'sample_' + hash;
    return this.download(url, filename);
  }

  downloadPcap(hash: string) {
    const url = `/malware/${hash}/pcap/`;
    const filename = 'pcap_' + hash + '.pcap';
    return this.download(url, filename);
  }

  getMap(sha256, relation) {
    const querystring = this.thiappGateway.getQuerystring({ limit: 10 });
    const url = `/malware/${sha256}/${relation}/?${querystring}`;
    return this.thiappGateway.get({ url });
  }

  getMalwareOptionsFromThiapp() {
    return this.thiappGateway.options({ url: '/malware/' });
  }

  requestDownloadByHash(hash) {
    return this.thiappGateway.post({ url: '/malware/download/', data: { hash } });
  }

  checkRequestDownloadTask(taskId) {
    return this.thiappGateway.get({ url: `/tasks/${taskId}` });
  }

  uploadMalwareFile(organizationId, moduleId, moduleName, file, isUrl: boolean = false, url = '') {
    const allPath = `${path}/organization/${organizationId}/module/${moduleId}/${moduleName}/malware/resource/upload`;

    const formData = new FormData();
    if (isUrl) {
      formData.append('url', url);
    } else {
      formData.append('fileInput', file);
      formData.append('filename', file.name);
    }

    formData.append('type', isUrl ? 'url' : 'file');
    return this.http.multipartFormPost(allPath, formData);
  }

  uploadMalwareUrl(organizationId, moduleId, moduleName, url) {
    return this.uploadMalwareFile.call(this, organizationId, moduleId, moduleName, null, true, url);
  }

  destroy({ moduleId, organizationId, id }) {
    return this.http.delete(
      `${path}/organization/${organizationId}/module/${moduleId}/threat_context/malware/resource/pending/${id}`
    );
  }

  private download(url: string, filename: string) {
    const options = new RequestOptions({});
    options.responseType = 'blob';
    return this.thiappGateway.get({ url, options }).pipe(
      map((response) => {
        const blob = new Blob([response], {
          type: 'application/octet-stream',
        });
        FileSaver.saveAs(blob, filename);
      })
    );
  }
}
