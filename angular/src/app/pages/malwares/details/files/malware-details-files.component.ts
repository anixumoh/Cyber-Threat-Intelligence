import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

import { ISelectItem } from '../../../../shared/components/select/select.component';
import { MalwaresStore } from '../malwares-store';

@Component({
  selector: 'app-malware-details-files',
  templateUrl: './malware-details-files.component.html',
  styleUrls: ['./malware-details-files.component.scss'],
})
export class MalwareDetailsFilesComponent implements OnInit, OnDestroy {
  items = [];
  loading = false;
  searchText = '';
  page = 0;
  count = 0;
  limit = 10;
  limits: ISelectItem[] = [
    { name: '10', value: 10 },
    { name: '15', value: 15 },
    { name: '20', value: 20 },
    { name: '30', value: 30 },
    { name: '50', value: 50 },
  ];
  tabs = [{ name: 'Info' }, { name: 'Yara' }, { name: 'Urls' }];
  activeTab = this.tabs[0];
  drawer = false;
  public selectedItem = {} as any;
  public data = [];
  public files = {};
  public target = {};
  private readonly destroy$ = new Subject<void>();

  constructor(private store: MalwaresStore) {}

  ngOnInit() {
    this.store.state$.pipe(takeUntil(this.destroy$)).subscribe((value) => {
      if (value) {
        this.files = {
          target: {
            target: value['target'],
            static: value['static'],
            virustotal: value['virustotal'],
            strings: value['strings'],
          },
          files: value['dropped'],
          buffers: value['buffer'],
        };
        this.prepareData();
      }
    });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private prepareData() {
    this.setTarget();
    this.setOffice();
    this.setBykey('files');
    this.setBykey('buffers');
  }

  private setBykey(key) {
    if (!this.files.hasOwnProperty(key) || !this.files[key]) {
      return;
    }
    const dataSource = this.files[key];
    this.setData(dataSource, key);
  }

  protected setTarget() {
    if (!this.files.hasOwnProperty('target') || !this.files['target']) {
      return;
    }
    const tmp = this.files['target']['target']['file'];
    if (this.files['target']['virustotal']) {
      tmp['virustotal'] = this.files['target']['virustotal'];
    }
    this.setData([tmp], 'target');
  }

  protected setOffice() {
    if (
      !this.files.hasOwnProperty('target') ||
      !this.files['target'].hasOwnProperty('static') ||
      !this.files['target']['static'] ||
      !this.files['target']['static'].hasOwnProperty('office') ||
      !this.files['target']['static']['office']
    ) {
      return;
    }
    const files = [];
    for (const doc of this.files['target']['static']['office']['macros']) {
      files.push({
        sha256: 'Embeded file',
        name: doc.filename,
        type: 'office',
        malware_type: 'UNCLASSIFIED',
        yara: [],
      });
    }
    this.setData(files, 'macros');
  }

  protected setData(dataSource: any[], origin: string) {
    for (const d of dataSource) {
      let virustotal = 'N/A';
      if (d.hasOwnProperty('virustotal') && d.virustotal.hasOwnProperty('summary')) {
        virustotal = d['virustotal']['summary']['detection_ratio'];
      }

      this.data.push({
        sha256: d['sha256'],
        name: d['name'],
        type: d['type'].split(' ', 1)[0],
        origin: origin,
        malware_type: d['malware_type'],
        av_ratio: virustotal,
        yara: d['yara'],
      });
    }
  }

  private getDroppedBySha256(sha256, origin) {
    let index = 0;
    for (const d of this.files[origin]) {
      if (d['sha256'] === sha256) {
        break;
      }
      index = index + 1;
    }
    return this.files[origin][index];
  }

  private getOfficeDoc(name) {
    for (const doc of this.files['target']['static']['office']['macros']) {
      if (doc.filename === name) {
        return doc;
      }
    }
  }

  private openDetails(origin, sha256, name) {
    let tmp;
    if (origin === 'target') {
      tmp = { ...this.files['target'] };
    } else if (origin === 'macros') {
      tmp = { ...this.getOfficeDoc(name) };
    } else {
      tmp = { ...this.getDroppedBySha256(sha256, origin) };
    }
    tmp['type'] = 'file';
    tmp['origin'] = origin;
    this.selectedItem = tmp;
  }

  get hasSelectedItem() {
    return !!Object.keys(this.selectedItem).length;
  }

  resetSelectedItem() {
    this.selectedItem = {};
  }
}
