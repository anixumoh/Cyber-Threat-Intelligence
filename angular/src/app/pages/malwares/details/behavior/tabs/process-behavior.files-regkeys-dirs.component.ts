import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';

@Component({
  selector: 'app-malware-details-process-behavior-files_regkeys_dirs',
  templateUrl: './process-behavior.files-regkeys-dirs.component.html'
})
export class MalwareProcessBehaviorFilesDirsRegkeys implements OnInit {
  @Input() data;
  @Input() dataType;

  private itemList = {};
  public dataRender = [];
  public selectedFilter = [];
  private fileFilter = ["created", "deleted", "opened", "read", "exists"];
  private dirFilter = ["created", "removed", "enumerated"];
  private regkeyFilter = ["written", "read", "opened"];

  ngOnInit() {
    this.loadFilters();
    this.prepareData(this.data);
  }

  private loadFilters() {
    if (this.dataType === "directory") {
      this.selectedFilter = this.dirFilter;
    }
    if (this.dataType === "file") {
      this.selectedFilter = this.fileFilter;
    }
    if (this.dataType === "registry") {
      this.selectedFilter = this.regkeyFilter;
    }
  }

  private prepareData(list) {
    this.dataRender = [];
    for (let key in list) {
      if (this.selectedFilter.indexOf(key) > -1) {
        for (let element of list[key]) {
          let item = {
            access: key,
            item: element
          };
          this.dataRender.push(item);
        }
      }
    }
  }

  private setAccessColor(accessType) {
    let out = "badge badge-success";
    if (accessType == "created") {
      out = "badge badge-danger";
    }
    if (accessType == "deleted") {
      out = "badge badge-warning";
    }
    if (accessType == "opened") {
      out = "badge badge-warning";
    }
    if (accessType == "exists") {
      out = "badge badge-info";
    }
    if (accessType == "removed") {
      out = "badge badge-warning";
    }
    if (accessType == "enumerated") {
      out = "badge badge-warning";
    }
    if (accessType == "written") {
      out = "badge badge-danger";
    }
    return out;
  }

  public onFilterEvent(event) {
    this.selectedFilter = event;
    this.prepareData(this.data.currentValue || this.data);
  }

}


