import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';

import { MalwaresStore } from '../malwares-store';
import { OrganizationService } from '../../../../dashboard/organization/organization.service';

@Component({
  selector: 'app-malware-details-configs',
  templateUrl: './malware-details-configs.component.html',
  styleUrls: ['./malware-details-configs.component.scss'],
})
export class MalwareDetailsConfigsComponent implements OnInit, OnDestroy {
  properties: any[] = [];
  activeModule = {};
  activeOrganization = {};
  groups: Record<string, any> = {};
  private readonly destroy$ = new Subject<void>();

  constructor(private store: MalwaresStore, private organizationService: OrganizationService) {}

  ngOnInit() {
    this.organizationService
      .getCurrentContext()
      .pipe(takeUntil(this.destroy$), take(1))
      .subscribe((context) => {
        this.activeModule = context.currentModule;
        this.activeOrganization = context.currentOrganization;
      });

    this.store.state$
      .pipe(
        takeUntil(this.destroy$),
        filter((item) => !!item),
        take(1)
      )
      .subscribe((data) => {
        if (data && data.blueliv) {
          const auxProperties = data.blueliv.malware_properties || [];
          const props = [];
          for (const item of auxProperties) {
            const { malware_type, properties } = item;
            for (const prop of properties) {
              const values = prop.value.toString().split('\n');
              if (values && values.length > 5) {
                const group = `${prop.key}-${Date.now()}`;
                const firstElements = values.splice(0, 5);
                for (const value of firstElements) {
                  props.push({
                    title: prop.title || prop.key,
                    key: prop.key,
                    type: malware_type,
                    value,
                  });
                }
                props.push({
                  group,
                  label: 'See all crimeservers',
                });

                this.groups[group] = { values, prop, type: malware_type };
              } else {
                for (const value of values) {
                  props.push({
                    title: prop.title || prop.key,
                    key: prop.key,
                    type: malware_type,
                    value,
                  });
                }
              }
            }
          }
          this.properties = props;
        }
      });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  handleGroup(event, group, index) {
    event.preventDefault();
    const { values, prop, type } = this.groups[group] || [];
    const props = [];
    for (const value of values) {
      props.push({
        title: prop.title || prop.key,
        key: prop.key,
        type,
        value,
      });
    }
    this.properties.splice(index, 1, ...props);
  }

  hasProperties() {
    return this.properties && this.properties.length > 0;
  }
}
