import { Component, Input, ViewEncapsulation } from '@angular/core';
import { RenderLargeTextComponent } from '../../../../../shared/components/render-large-text/render-large-text.component';
import * as moment from 'moment';
import { parseDomain, fromUrl, ParseResultType } from 'parse-domain';

@Component({
  selector: 'app-cve-description',
  templateUrl: './cve-description.component.html',
  styleUrls: ['./cve-description.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class CVEDescriptionComponent {
  @Input() model;

  cpeSettings = {
    hideSubHeader: true,
    attr: {
      class: 'table table-hover table-responsive table-outline mb-3 hidden-sm-down'
    },
    actions: false,
    columns: {
      title: {
        title: 'Title',
        sort: false,
        filter: false
      },
      id: {
        title: 'CPE',
        sort: false,
        filter: false
      }
    },
    pager: {
      perPage: 5
    }
  };

  exploitSettings = {
    hideSubHeader: true,
    attr: {
      class: 'table table-hover table-responsive table-outline mb-3 hidden-sm-down'
    },
    sortDirection: 'desc',
    actions: false,
    columns: {
      name: {
        title: 'Name',
        sort: false,
        filter: false,
        type: 'custom',
        renderComponent: RenderLargeTextComponent
      },
      author: {
        title: 'Author',
        sort: false,
        filter: false
      },
      type: {
        title: 'Type',
        sort: false,
        filter: false
      },
      platform: {
        title: 'Platform',
        sort: false,
        filter: false
      },
      id: {
        title: 'Source',
        sort: false,
        class: 'text-center',
        filter: false,
        type: 'html',
        valuePrepareFunction: (value, row) => {
          return `<div class="text-center">${this.getDomain(row.url)}</div>`;
        }
      },
      date: {
        title: 'Date',
        sort: true,
        filter: false,
        valuePrepareFunction: (value) => {
          return `${value ? moment(value).format('DD/MM/YYYY') : '-'}`;
        }
      },
      url: {
        title: 'Url',
        class: 'text-center',
        type: 'html',
        width: '10%',
        valuePrepareFunction: (value, row) => {
          return `
          <div class="text-center">
            <a href="${value}" target="_blank">
              <i class="icon-external-link text-primary"></i>
            </a>
          </div>`;
        }
      }
    },
    pager: {
      perPage: 5
    }
  };

  protected getDomain(url) {
    const parseResult = parseDomain(fromUrl(url));
    if (parseResult.type === ParseResultType.Listed) {
      const { domain, topLevelDomains } = parseResult;
      return `${domain}.${topLevelDomains.join('.')}`;
    }
  }
}
