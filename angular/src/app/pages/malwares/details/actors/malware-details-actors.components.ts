import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

import { IndicatorsService } from '../../../../core/models/indicators.service';
import { MalwaresStore } from '../malwares-store';

@Component({
  selector: 'malware-details-actors',
  templateUrl: './malware-details-actors.components.html',
})
export class MalwareDetailsActorsComponents implements OnInit, OnDestroy {
  malwareId;
  private readonly destroy$ = new Subject<void>();

  constructor(private malwaresStore: MalwaresStore, private indicatorsService: IndicatorsService) {}

  ngOnInit() {
    this.malwaresStore.state$.pipe(takeUntil(this.destroy$)).subscribe((response) => {
      if (response) {
        this.malwareId = response.malwareId;
      }
    });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  actorsListSource = (params) =>
    this.indicatorsService.getGenericDetails({
      type: 'malware',
      id: this.malwareId,
      extension: 'threat-actor',
      params,
    });
}
