import { finalize, take, takeUntil } from 'rxjs/operators';
import { Component, OnDestroy, OnInit } from '@angular/core';
import { ISelectItem } from '../../../../shared/components/select/select.component';
import { MalwaresStore } from '../malwares-store';
import { MalwaresService } from '../../../../core/models/malwares.service';
import { Subject } from 'rxjs';

@Component({
  selector: 'app-malware-details-api-calls',
  templateUrl: './malware-details-api-calls.component.html',
  styleUrls: ['./malware-details-api-calls.component.scss'],
})
export class MalwareDetailsApiCallsComponent implements OnInit, OnDestroy {
  items = [];
  loading = false;
  searchText = '';
  page = 0;
  count = 0;
  limits: ISelectItem[] = [
    { name: '50', value: 50 },
    { name: '100', value: 100 },
    { name: '500', value: 5000 },
    { name: '1000', value: 1000 },
  ];
  limit = this.limits[0].value;

  malwareId;
  categories;
  selectedCategory;
  private readonly destroy$ = new Subject<void>();

  constructor(private store: MalwaresStore, private model: MalwaresService) {
    this.categories = [
      { name: 'default', color: 'red' },
      { name: 'certificate', color: 'red' },
      { name: 'crypto', color: 'red' },
      { name: 'exception', color: 'red' },
      { name: 'file', color: 'red' },
      { name: 'iexplore', color: 'red' },
      { name: 'misc', color: 'red' },
      { name: 'netapi', color: 'red' },
      { name: 'network', color: 'red' },
      { name: 'office', color: 'red' },
      { name: 'ole', color: 'red' },
      { name: 'pdf', color: 'red' },
      { name: 'process', color: 'red' },
      { name: 'registry', color: 'red' },
      { name: 'resource', color: 'red' },
      { name: 'services', color: 'red' },
      { name: 'sync', color: 'red' },
      { name: 'system', color: 'red' },
      { name: 'ui', color: 'red' },
      { name: 'syscall', color: 'red' },
    ];
    this.selectedCategory = this.categories[0];
  }

  ngOnInit() {
    this.store.state$.pipe(takeUntil(this.destroy$)).subscribe((data) => {
      if (data) {
        this.malwareId = data.malwareId;
        this.setCategory(0);
      }
    });
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  setCategory(index) {
    this.selectedCategory = this.categories[index];
    this.list();
  }

  reload() {
    this.page = 0;
    this.list();
  }

  onChangeLimit(item: ISelectItem) {
    this.limit = item.value;
    this.reload();
  }

  search() {
    this.reload();
  }

  onPageChange({ page }) {
    this.page = page;
    this.list();
  }

  list() {
    let pid = '';
    let search = '';
    if (isNaN(Number(this.searchText))) {
      search = this.searchText;
    } else {
      pid = this.searchText;
    }
    const { limit, page } = this;
    this.loading = true;
    this.model
      .apiCalls({
        malwareId: this.malwareId,
        category: this.selectedCategory.name === 'default' ? '' : this.selectedCategory.name,
        pid,
        limit,
        page,
        search,
      })
      .pipe(
        takeUntil(this.destroy$),
        take(1),
        finalize(() => (this.loading = false))
      )
      .subscribe(({ data, meta }) => {
        if (data && meta) {
          this.items = data.map(({ id, attributes }) => ({
            id,
            ...attributes,
            ...{ time: attributes.time ? attributes.time.toFixed(0) : 0 },
            ...{ timeDelta: attributes.time_delta ? attributes.time_delta.toFixed(0) : 0 },
          }));
          this.count = meta.pagination.count;
        }
      });
  }
}
