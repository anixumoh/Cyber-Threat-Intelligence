import { Injectable } from '@angular/core';
import { ICONS } from './processtree.icons';
import * as go from 'gojs';

import { ProcessTreeEventHandlerService } from './processtree.event_handler.service';

@Injectable()
export class ProcessTreeRenderService {
  private links = [];
  private nodes = [];
  private diagram: go.Diagram;
  private diagramElement;

  constructor(private evSrv: ProcessTreeEventHandlerService) {
    go.Diagram.licenseKey =
      '73f942e1b66228a800ca0d2b113f69ee1bb37b3a9e811ff25e5741a3ef5f694170c9ed7958d68fc3c0e848fb4a75c1db8dc53d2a9145056fee61d7dc4ae183adb53073b2120a47dbf70a22c6cdfc29a9fb2c79f590b776a28a7b88f0eafad18c5abda3d248985eba3b680530557db04da8f9d8';

    this.diagram = new go.Diagram();
    this.initializeDiagram();
  }

  private initializeDiagram() {
    const $ = go.GraphObject.make;
    this.diagram.allowCopy = false;
    ///this.diagram.draggingTool.dragsTree = true;
    this.diagram.commandHandler.deletesTree = true;
    // users can select only one part at a time
    this.diagram.maxSelectionCount = 1;
    // how quickly tooltips are shown
    this.diagram.toolManager.hoverDelay = 10;
    this.diagram.initialContentAlignment = go.Spot.Center;
    this.diagram.undoManager.isEnabled = true;
    this.diagram.layout = $(go.TreeLayout, { angle: 90 });

    // Add a listener for object clicks
    this.diagram.addDiagramListener('ObjectSingleClicked', (e) => {
      this.onProcessClick(e);
    });
    // scale to show all of the contents
    // this.diagram.initialAutoScale = go.Diagram.Uniform;
  }

  private onProcessClick(obj) {
    const part = obj.subject.part;
    if (!(part instanceof go.Link)) {
      this.evSrv.onProcessClick(part.data);
    }
  }

  public render(nodes, links, element) {
    this.nodes = nodes;
    this.links = links;
    this.diagramElement = element;

    this.setNodeTemplate();
    this.setNodeTemplateMap();
    this.setLinkTemplate();
    this.setLinkTemplateMap();
    this.setModel();
    this.setPlaceHolder();
  }

  private setNodeTemplate() {
    const $ = go.GraphObject.make;
    this.diagram.nodeTemplate = $(
      // the default node template
      go.Node,
      'Vertical',
      // TODO: Remove when filtering is available on the tree
      new go.Binding('isTreeExpanded', 'pid', function (pid) {
        return !pid.startsWith('signature_') && !pid.startsWith('dropped_');
      }),
      // End of remove
      {
        deletable: false,
        toolTip: $(
          go.Adornment,
          'Auto',
          $(go.Shape, { fill: '#EFEFCC' }),
          $(go.TextBlock, { margin: 4, width: 140 }, new go.Binding('text', '', this.infoString).ofObject())
        ),
      },
      // The main element of the panel is a vertical panel housing a:
      // TEXT - ICON - TEXT - Expand button,
      $(
        go.Panel,
        'Vertical',
        $(
          go.TextBlock,
          {
            margin: new go.Margin(3, 0, 0, 0),
            maxSize: new go.Size(100, 30),
            isMultiline: false,
            font: 'bold 10pt sans-serif',
          },
          new go.Binding('text', 'title')
        ),
        $(
          go.Shape,
          {
            name: 'icon',
            width: 2,
            height: 2,
            stroke: null,
            strokeWidth: 0,
            fill: '#41BFEC' /* blue */,
          },
          new go.Binding('fill', 'color'),
          new go.Binding('width', 'iconWidth'),
          new go.Binding('height', 'iconHeight'),
          new go.Binding('geometry', 'icon', this.getIcon)
        ),
        $(
          go.TextBlock,
          { margin: new go.Margin(3, 0, 0, 0), maxSize: new go.Size(100, 30) },
          new go.Binding('text', 'process_name')
        )
      ),
      $(
        go.Panel, // this is underneath the 'BODY'
        { height: 15 }, // always this height, even if the TreeExpanderButton is not visible
        $('TreeExpanderButton')
      )
    );
  }

  private setNodeTemplateMap() {
    const $ = go.GraphObject.make;
    this.diagram.nodeTemplateMap.add(
      'signature',
      $(
        go.Node,
        'Auto',
        {
          deletable: false,
          toolTip: $(
            go.Adornment,
            'Auto',
            $(go.Shape, { fill: '#EFEFCC' }),
            $(go.TextBlock, { margin: 4, width: 140 }, new go.Binding('text', 'tip_text'))
          ),
        },
        $(go.Shape, 'Rectangle', {
          fill: 'lightgray',
          stroke: null,
          strokeWidth: 0,
          stretch: go.GraphObject.Fill,
          alignment: go.Spot.Center,
        }),
        $(
          go.TextBlock,
          {
            font: '700 12px Droid Serif, sans-serif',
            textAlign: 'center',
            margin: 10,
            maxSize: new go.Size(80, NaN),
          },
          new go.Binding('text', 'text')
        )
      )
    );

    this.diagram.nodeTemplateMap.add(
      'network',
      $(
        go.Node,
        'Vertical',
        {
          deletable: false,
          toolTip: $(
            go.Adornment,
            'Auto',
            $(go.Shape, { fill: '#EFEFCC' }),
            $(go.TextBlock, { margin: 4, width: 140 }, new go.Binding('text', '', this.infoString).ofObject())
          ),
        },
        // The main element of the panel is a vertical panel housing a:
        //  ICON - TEXT - Expand button,
        $(
          go.Panel,
          'Vertical',
          $(
            go.Shape,
            {
              name: 'icon',
              width: 2,
              height: 2,
              stroke: null,
              strokeWidth: 0,
              fill: '#41BFEC' /* blue */,
            },
            new go.Binding('fill', 'color'),
            new go.Binding('width', 'iconWidth'),
            new go.Binding('height', 'iconHeight'),
            new go.Binding('geometry', 'icon', this.getIcon)
          ),
          $(
            go.TextBlock,
            { margin: new go.Margin(3, 0, 0, 0), maxSize: new go.Size(100, 30) },
            new go.Binding('text', 'text')
          )
        )
      )
    );

    this.diagram.nodeTemplateMap.add(
      'dropped',
      $(
        go.Node,
        'Vertical',
        {
          deletable: false,
          toolTip: $(
            go.Adornment,
            'Auto',
            $(go.Shape, { fill: '#EFEFCC' }),
            $(go.TextBlock, { margin: 4, width: 140 }, new go.Binding('text', '', this.infoString).ofObject())
          ),
        },
        // The main element of the panel is a vertical panel housing a:
        //  ICON - TEXT - Expand button,
        $(
          go.Panel,
          'Vertical',
          $(
            go.Shape,
            {
              name: 'icon',
              width: 2,
              height: 2,
              stroke: null,
              strokeWidth: 0,
              fill: '#41BFEC' /* blue */,
            },
            new go.Binding('fill', 'color'),
            new go.Binding('width', 'iconWidth'),
            new go.Binding('height', 'iconHeight'),
            new go.Binding('geometry', 'icon', this.getIcon)
          ),
          $(
            go.TextBlock,
            { margin: new go.Margin(3, 0, 0, 0), maxSize: new go.Size(100, 30) },
            new go.Binding('text', 'text')
          )
        )
      )
    );
  }

  private setLinkTemplate() {
    const $ = go.GraphObject.make;
    this.diagram.linkTemplate = $(
      go.Link,
      go.Link.Orthogonal,
      { deletable: false, corner: 10 },
      $(go.Shape, { strokeWidth: 3 }),
      $(
        go.TextBlock,
        go.Link.OrientUpright,
        {
          background: 'white',
          visible: false, // unless the binding sets it to true for a non-empty string
          segmentIndex: -2,
          segmentOrientation: go.Link.None,
        },
        new go.Binding('text', 'label'),
        // hide empty string;
        // if the 'answer' property is undefined, visible is false due to above default setting
        new go.Binding('visible', 'label', function (a) {
          return a ? true : false;
        })
      )
    );
  }

  private setLinkTemplateMap() {
    const $ = go.GraphObject.make;
    this.diagram.linkTemplateMap.add(
      'Injection',
      $(
        go.Link,
        go.Link.Bezier,
        { isLayoutPositioned: false, isTreeLink: false, curviness: -60 },
        { relinkableFrom: true, relinkableTo: true },
        {
          toolTip: $(
            go.Adornment,
            'Auto',
            $(go.Shape, { fill: '#EFEFCC' }),
            $(go.TextBlock, { margin: 4, width: 140 }, new go.Binding('text', 'tip_text'))
          ),
        },
        $(go.Shape, { stroke: 'red', strokeWidth: 2 }),
        $(go.Shape, { toArrow: 'OpenTriangle', stroke: 'red', strokeWidth: 2 }),
        $(go.TextBlock, new go.Binding('text', 'text'), {
          stroke: 'red',
          background: 'rgba(255,255,255,0.75)',
          maxSize: new go.Size(80, NaN),
        })
      )
    );
  }

  private setModel() {
    const $ = go.GraphObject.make;
    // create the Model with the above data, and assign to the Diagram
    this.diagram.model = $(go.GraphLinksModel, { nodeDataArray: this.nodes, linkDataArray: this.links });
  }

  private setPlaceHolder() {
    this.diagram.div = this.diagramElement.nativeElement;
  }

  private infoString(obj) {
    let part = obj.part;
    if (part instanceof go.Adornment) {
      part = part.adornedPart;
    }
    let msg = '';
    if (part instanceof go.Node) {
      msg = part.data.tip_text;
    }
    return msg;
  }

  private getIcon(iconType) {
    // A data binding conversion function. Given an name, return the Geometry.
    // If there is only a string, replace it with a Geometry object,
    // which can be shared by multiple Shapes.

    let newIcon = ICONS['default'];
    if (ICONS.hasOwnProperty(iconType)) {
      newIcon = ICONS[iconType];
    }
    return go.Geometry.parse(newIcon, true);
  }
}
