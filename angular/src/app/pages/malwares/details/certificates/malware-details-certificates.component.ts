import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
import * as moment from 'moment-timezone';

import { MalwaresStore } from '../malwares-store';
import { OrganizationService } from '../../../../dashboard/organization/organization.service';

@Component({
  selector: 'app-malware-details-certificates',
  templateUrl: './malware-details-certificates.component.html',
  styleUrls: ['./malware-details-certificates.component.scss'],
})
export class MalwareDetailsCertificatesComponent implements OnInit, OnDestroy {
  certificates = [];
  activeModule = {};
  activeOrganization = {};
  private readonly destroy$ = new Subject<void>();

  constructor(private store: MalwaresStore, private organizationService: OrganizationService) {}

  ngOnInit() {
    this.organizationService
      .getCurrentContext()
      .pipe(takeUntil(this.destroy$), take(1))
      .subscribe((context) => {
        if (context) {
          this.activeModule = context.currentModule;
          this.activeOrganization = context.currentOrganization;
        }
      });

    this.store.state$
      .pipe(
        takeUntil(this.destroy$),
        filter((item) => !!item),
        take(1)
      )
      .subscribe((data) => {
        if (data && data.blueliv) {
          const ioa = data.blueliv.ioa;
          this.certificates = ioa.certificates || [];
        }
      });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  getDate(date) {
    const newDate = new Date(date);
    const timezonedDate = moment(newDate).format('D/M/YYYY HH:mm (Z)');
    return timezonedDate;
  }
}
