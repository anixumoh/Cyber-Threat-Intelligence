import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';

@Component({
  selector: 'app-malware-details-files-details',
  templateUrl: `./malware-details-files-details.component.html`,
  styleUrls: ['./malware-details-files-details.component.scss'],
})
export class MalwareDetailsFilesDetailsComponent implements OnChanges {
  @Input() selectedItem;

  public data = [];
  public virustotal = {};
  public fileInfo = {} as any;
  public staticInfo = {};
  public urls = [];
  public strings = [];
  public yara = [];
  public origin = '';

  ngOnChanges(changes: SimpleChanges) {
    if (changes.hasOwnProperty('selectedItem')) {
      this.origin = this.selectedItem.origin;
      this.cleanData();
      this.prepareData();
    }
  }

  private prepareTarget() {
    this.fileInfo = this.selectedItem.target.file;
    this.virustotal = this.selectedItem.virustotal;
    this.staticInfo = this.selectedItem.static;
    this.strings = this.selectedItem.strings || [];
    if (this.fileInfo && this.fileInfo.hasOwnProperty('urls')) {
      this.urls = this.fileInfo['urls'];
    }

    this.data = [
      { title: 'Malware Type', value: this.fileInfo['malware_type'] },
      { title: 'Size', value: this.fileInfo['size'] },
      { title: 'Type', value: this.fileInfo['type'] },
      { title: 'Packer', value: this.fileInfo['packer'] },
      { title: 'MD5', value: this.fileInfo['md5'] },
      { title: 'SHA1', value: this.fileInfo['sha1'] },
      { title: 'SHA256', value: this.fileInfo['sha256'] },
      { title: 'SHA512', value: this.fileInfo['sha512'] },
      { title: 'SSDEEP', value: this.fileInfo['ssdeep'] },
      { title: 'CRC32', value: this.fileInfo['crc32'] },
    ];
    if (this.staticInfo) {
      this.data.push({ title: 'PEiD Signatures', value: this.staticInfo['peid_signatures'] });
    }
  }

  private prepareOffice() {
    this.fileInfo = this.selectedItem;
    this.data = [
      { title: 'File name', value: this.fileInfo['filename'] },
      { title: 'Stream', value: this.fileInfo['stream'] },
    ];
  }

  private prepareGeneric() {
    this.fileInfo = this.selectedItem;
    this.virustotal = {};
    if (this.selectedItem.hasOwnProperty('virustotal')) {
      this.virustotal = this.selectedItem.virustotal;
    }
    this.strings = [];
    if (this.selectedItem.hasOwnProperty('content')) {
      this.strings = this.selectedItem.content.split('\n');
    }
    if (this.fileInfo && this.fileInfo.hasOwnProperty('urls')) {
      this.urls = this.fileInfo['urls'];
    }
    if (this.fileInfo && this.fileInfo.hasOwnProperty('yara')) {
      this.yara = this.fileInfo['yara'];
    }
    this.data = [
      { title: 'Malware Type', value: this.fileInfo['malware_type'] },
      { title: 'Size', value: this.fileInfo['size'] },
      { title: 'Type', value: this.fileInfo['type'] },
      { title: 'MD5', value: this.fileInfo['md5'] },
      { title: 'SHA1', value: this.fileInfo['sha1'] },
      { title: 'SHA256', value: this.fileInfo['sha256'] },
      { title: 'SHA512', value: this.fileInfo['sha512'] },
      { title: 'SSDEEP', value: this.fileInfo['ssdeep'] },
      { title: 'CRC32', value: this.fileInfo['crc32'] },
    ];
  }

  private prepareData() {
    if (this.origin === 'target') {
      this.prepareTarget();
    } else if (this.origin === 'macros') {
      this.prepareOffice();
    } else {
      this.prepareGeneric();
    }
  }

  private cleanData() {
    this.data = [];
    this.virustotal = {};
    this.fileInfo = {};
    this.staticInfo = {};
    this.urls = [];
    this.strings = [];
    this.yara = [];
  }

  public hasVTInfo() {
    if (!this.virustotal) {
      return false;
    }
    return Object.keys(this.virustotal).length !== 0;
  }

  public hasOfficeInfo() {
    if (this.origin && this.origin.indexOf('macros') >= 0) {
      return true;
    }
    return false;
  }

  public hasPDFInfo() {
    if (this.origin && this.fileInfo['type'].toLowerCase().indexOf('pdf') >= 0) {
      return true;
    }
    return false;
  }

  public hasPEInfo() {
    if (this.origin && this.fileInfo['type'].indexOf('PE32') >= 0) {
      return true;
    }
    return false;
  }

  public hasArchiveInfo() {
    if (this.origin && (this.fileInfo['type'].indexOf('Zip') >= 0 || this.fileInfo['type'].indexOf('RAR') >= 0)) {
      return true;
    }
    return false;
  }

  public getYaraName(yara) {
    if (yara.hasOwnProperty('rule')) {
      return yara.rule;
    }
    return yara.name;
  }

  public getYaraStrings(yara) {
    return yara.strings.join('<br/>');
  }
}
