import { Injectable } from '@angular/core';
import * as _ from 'lodash';

const { find, template } = _;

const DATA_TO_SHOW = [
  {
    title: 'File',
    leaf: false,
    content: [
      {
        title: 'Write buffers',
        key: 'file_written_buffers',
        leaf: true,
        content: [],
      },
      {
        title: 'Read buffers',
        key: 'file_read_buffers',
        leaf: true,
        content: [],
      },
      {
        title: 'Read',
        key: 'file_read',
        leaf: true,
        content: [],
      },
      {
        title: 'Opened',
        key: 'file_opened',
        leaf: true,
        content: [],
      },
      {
        title: 'Exists',
        key: 'file_exists',
        leaf: true,
        content: [],
      },
      {
        title: 'Created',
        key: 'file_created',
        leaf: true,
        content: [],
      },
      {
        title: 'Written',
        key: 'file_written',
        leaf: true,
        content: [],
      },
      // TODO: Delte and Execute are missing in the report.summary object
    ],
  },
  {
    title: 'Registry',
    leaf: false,
    content: [
      {
        title: 'Read',
        key: 'regkey_read',
        leaf: true,
        content: [],
      },
      {
        title: 'Enumarated',
        key: 'regkey_enumerated',
        leaf: true,
        content: [],
      },
      {
        title: 'Deleted',
        key: 'regkey_deleted',
        leaf: true,
        content: [],
      },
      {
        title: 'Written',
        key: 'regkey_written',
        leaf: true,
        content: [],
      },
      {
        title: 'Created',
        key: 'regkey_created',
        leaf: true,
        content: [],
      },
      {
        title: 'Opened',
        key: 'regkey_opened',
        leaf: true,
        content: [],
      },
    ],
  },
  {
    title: 'Directory',
    leaf: false,
    content: [
      {
        title: 'Created',
        key: 'directory_created',
        leaf: true,
        content: [],
      },
      {
        title: 'Queued',
        key: 'directory_queried',
        leaf: true,
        content: [],
      },
      {
        title: 'Enumerated',
        key: 'directory_enumerated',
        leaf: true,
        content: [],
      },
    ],
  },
  {
    title: 'Load library',
    key: 'dll_loaded',
    leaf: true,
    content: [],
  },
  {
    title: 'Mutex',
    key: 'mutex',
    leaf: true,
    content: [],
  },
  {
    title: 'API calls',
    key: 'loaded_procedure_addresses',
    leaf: true,
    content: [],
  },
  // More?
];

@Injectable()
export class MalwareDynamicsService {
  selectedFile;
  selectedProcess;
  selectedProcessMetadata;
  resource;
  details: any[] = [];
  isSelected = false;
  isFromDetail = false;

  select(type: string, artifact: any, extra?: any) {
    this.isSelected = false;

    if (type == 'process') {
      const isNewProcess: boolean =
        !this.selectedProcess || this.selectedProcess.id !== artifact.id || this.isFromDetail;
      this.isFromDetail = false;

      if (isNewProcess) {
        this.isSelected = true;
        this.selectedProcess = artifact;
        this.selectedProcessMetadata = artifact;
        this.createDetails(artifact);
      } else {
        this.selectedProcess = undefined;
        this.selectedProcessMetadata = {};
      }

      this.selectedFile = undefined;
    } else if (type == 'file') {
      const isNewIteration: boolean =
        !this.selectedFile || this.selectedFile.sha1 !== artifact.sha1 || this.isFromDetail;
      this.isFromDetail = false;

      if (isNewIteration) {
        this.isSelected = true;
        this.selectedFile = artifact;
      } else {
        this.selectedFile = undefined;
      }

      this.selectedProcess = undefined;
    }
  }

  deselect() {
    this.isSelected = false;
    this.selectedFile = undefined;
    this.selectedProcess = undefined;
  }

  selectedName(): string {
    if (this.selectedFile) {
      return this.selectedFile.name;
    } else if (this.selectedProcess) {
      return this.selectedProcess.process_name;
    }
  }

  getDetails() {
    return this.details;
  }

  createDetails(data: any) {
    this.details = DATA_TO_SHOW;
    this.details.forEach((obj: any) => {
      if (obj && obj.content && obj.content.length === 0) {
        const value = data.summary[obj.key];
        if (value && value.length > 0) {
          obj.content = value;
        } else {
          obj.content = [];
        }
      } else {
        if (obj && obj.content) {
          obj.content.forEach((element) => {
            const value = data.summary[element.key];
            if (typeof element !== 'string') {
              if (value && value.length > 0) {
                element.content = value;
              } else {
                element.content = [];
              }
            }
          });
        }
      }
    });
  }
}
