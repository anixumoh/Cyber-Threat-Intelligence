import { Injectable } from '@angular/core';
import { Transformer } from 'app/dashboard/intelligence/tranforms/abstract-transformer.transformer';
import { ellipseUrlNew } from 'app/utils/functions';
import * as moment from 'moment';

/** Class that transform the data from service to BasicInfo  */
@Injectable()
export class MalwaresTransformer extends Transformer {
  mockIOC: any = {
    data: [
      {
        type: 'Indicator',
        id: '5806119',
        attributes: {
          created_at: '2017-12-02T08:41:54.745947Z',
          type: 'IP',
          updated_at: '2017-12-02T08:41:54.746001Z',
          value: '67.229.100.20',
        },
      },
      {
        type: 'Indicator',
        id: '5506173',
        attributes: {
          created_at: '2017-12-07T19:06:29.692526Z',
          type: 'IP',
          updated_at: '2017-12-07T19:06:29.692558Z',
          value: '2.17.122.210',
        },
      },
      {
        type: 'Indicator',
        id: '413176',
        attributes: {
          created_at: '2017-11-03T23:27:15.865899Z',
          type: 'Fqdn',
          updated_at: '2017-11-03T23:27:15.865963Z',
          value: 'r.pengyou.com',
        },
      },
      {
        type: 'Indicator',
        id: '10162',
        attributes: {
          created_at: '2017-12-07T19:06:29.692526Z',
          type: 'IP',
          updated_at: '2017-12-07T19:06:29.692558Z',
          value: '8.8.8.8',
        },
      },
    ],
  };

  mockExternal: any = {
    data: {
      attributes: {
        scans: [
          {
            detected: true,
            result: 'Trojan.Generic.6923327',
            vendor: 'Ad-Aware',
          },
          {
            detected: true,
            result: 'Troj.W32.Vilsel.lRrw',
            vendor: 'AegisLab',
          },
          {
            detected: true,
            result: 'Trojan/Win32.Vilsel',
            vendor: 'AhnLab-V3',
          },
          {
            detected: true,
            result: 'Trojan.Generic.6923327',
            vendor: 'ALYac',
          },
          {
            detected: true,
            result: 'Trojan/Win32.Vilsel',
            vendor: 'Antiy-AVL',
          },
          { vendor: 'Alibaba', detected: false, result: null },
          { vendor: 'Baidu-International', detected: false, result: null },
          { vendor: 'Kingsoft', detected: false, result: null },
          { vendor: 'Malwarebytes', detected: false, result: null },
          { vendor: 'Zoner', detected: false, result: null },
        ],
      },
    },
  };

  transformData(data, state: string, currentOrganizationId: number, currentModuleId: number) {
    switch (state) {
      case 'malware':
        return {
          title: data.hash ? data.hash : 'Malware',
          firstSeen: moment(data['first_seen'], 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
          lastSeen: moment(data['last_seen'], 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
          md5: {
            value: data.md5 != null ? data.md5 : '-',
            shortName: data.md5 != null ? ellipseUrlNew(data.md5, 15) : '-',
          },
          sha1: {
            value: data.sha1 != null ? data.sha1 : '-',
            shortName: data.sha1 != null ? ellipseUrlNew(data.sha1, 15) : '-',
          },
          sha256: {
            value: data.sha256 != null ? data.sha256 : '-',
            shortName: data.sha256 != null ? ellipseUrlNew(data.sha256, 15) : '-',
          },
          tlp: data.tlp ? data.tlp.toUpperCase() : '-',
          score: {
            score: data.risk != null ? data.risk : 0,
            id: data.hash,
          },
        };
      case 'crime-server':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          return tempArray;
        });
      case 'threat-actor':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          tempArray.forEach((it) => {
            it.customLink = [
              `/dashboard/organizations/${currentOrganizationId}/modules/${currentModuleId}/threat_context/actors/${it.id}`,
            ];
            it.resourceDataByModule = [
              {
                value: it.attributes.name ? it.attributes.name : '-',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
              {
                value: it.attributes.tlp ? it.attributes.tlp.toUpperCase() : '-',
                isTLP: true,
                class: 'td-center',
              },
              {
                value: moment(it.attributes.first_seen, 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
                class: 'td-center',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
            ];
          });
          return {
            value: tempArray,
            totalResources: data.meta.pagination.count,
          };
        });
      case 'campaign':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          tempArray.forEach((it) => {
            it.customLink = [
              `/dashboard/organizations/${currentOrganizationId}/modules/${currentModuleId}/threat_context/campaigns/${it.id}`,
            ];
            it.resourceDataByModule = [
              {
                value: it.attributes.name ? it.attributes.name : '-',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
              {
                value: it.attributes.tlp ? it.attributes.tlp.toUpperCase() : '-',
                isTLP: true,
                class: 'td-center',
              },
              {
                value: moment(it.attributes.first_seen, 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
                class: 'td-center',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
            ];
          });
          return {
            value: tempArray,
            totalResources: data.meta.pagination.count,
          };
        });
      case 'signature':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          tempArray.forEach((it) => {
            it.customLink = [
              `/dashboard/organizations/${currentOrganizationId}/modules/${currentModuleId}/threat_context/signatures/${it.id}`,
            ];
            it.resourceDataByModule = [
              {
                value: it.attributes.name ? it.attributes.name : '-',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
              {
                value: it.attributes.tlp ? it.attributes.tlp.toUpperCase() : '-',
                isTLP: true,
                class: 'td-center',
              },
              {
                value: moment(it.attributes.created_at, 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
                class: 'td-center',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
            ];
          });
          return {
            value: tempArray,
            totalResources: data.meta.pagination.count,
          };
        });
      case 'spark':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          tempArray.forEach((it) => {
            it.name = it.attributes.name ? it.attributes.name : '-';
            it.tlp = it.attributes.tlp ? it.attributes.tlp.toUpperCase() : 'WHITE';
            it.customLink = `https://community.blueliv.com/#!/s/${it.attributes.community_id}`;
            it.sparkTags = it.attributes.tags.map((tag) => {
              return {
                name: tag,
                customLink: `https://community.blueliv.com/#!/discover?tags=${tag.toLowerCase()}`,
              };
            });
          });
          return tempArray;
        });
      case 'ioc':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          tempArray.forEach((it) => {
            it.customLink = [
              `/dashboard/organizations/${currentOrganizationId}/modules/${currentModuleId}/threat_context/${(
                it.type as string
              ).toLowerCase()}/${(it.attributes.type as string).toLowerCase()}/resource/${
                it.attributes.type === 'Malware' || it.attributes.type === 'IP' ? it.attributes.value : it.id
              }`,
            ];
            it.resourceDataByModule = [
              {
                value: it.attributes.value ? it.attributes.value : '-',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
              {
                value: it.attributes.type
                  ? it.attributes.type === 'IP' || it.attributes.type === 'Fqdn'
                    ? it.attributes.type.toUpperCase()
                    : it.attributes.type
                  : '-',
                class: 'td-center',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
              {
                value: moment(it.attributes.created_at, 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
                class: 'td-center',
                elementClass: 'mb-0 text-90 font-weight-normal',
              },
              {
                value: moment(it.attributes.updated_at, 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY'),
                class: 'td-center',
              },
            ];
          });
          return {
            value: tempArray,
            totalResources: data.meta.pagination.count,
          };
        });
      case 'source':
        return this.defaultBehaviour(data, () => {
          const tempArray = data.data;
          tempArray.forEach((it) => {
            it.name = it.attributes.name ? it.attributes.name : '-';
            it.createt_at = moment(data[it.attributes.created_at], 'YYYY-MM-DD[T]HH:mm:ss').format('DD/MM/YYYY');
            it.keyword = it.attributes.keyword ? it.attributes.keyword : null;
            if (it.name.toLowerCase() === 'malware' && it.keyword) {
              it.customLink = [
                `/dashboard/organizations/${currentOrganizationId}/modules/${currentModuleId}/threat_context/indicators/malware/resource/${it.keyword}`,
              ];
            }
          });
          return tempArray;
        });
      case 'scans':
        return this.defaultObjectBehaviour(data, () => {
          const tempArray = data.data;
          if (tempArray.attributes && tempArray.attributes.scans && tempArray.attributes.scans.length) {
            tempArray.attributes.scans.forEach((it) => {
              it.resourceDataByModule = [
                { value: it.vendor ? it.vendor : '-' },
                { value: it.result ? it.result : '-' },
                {
                  iconClass: it.detected ? 'icon-blv-warning text-white' : 'icon-check_circle text-white',
                  color: it.detected ? '#DC665A' : '#00B18F',
                  iconMalware: true,
                  text: it.detected ? 'Malicious' : 'Clean',
                },
              ];
            });
            return tempArray.attributes.scans;
          } else {
            return [];
          }
        });
      default:
        break;
    }
  }
}
