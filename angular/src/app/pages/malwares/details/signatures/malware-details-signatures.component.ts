import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { MalwaresStore } from '../malwares-store';
import { OrganizationService } from 'app/dashboard/organization/organization.service';

@Component({
  selector: 'app-malware-details-signatures',
  templateUrl: './malware-details-signatures.component.html',
  styleUrls: ['./malware-details-signatures.component.scss'],
})
export class MalwareDetailsSignaturesComponent implements OnInit, OnDestroy {
  activeModule: any = {};
  activeOrganization: any = {};
  malwareId;
  signatures = [];
  signatureList = {
    high: [],
    middle: [],
    low: [],
  };

  severities: any[] = [
    {
      name: 'Severity High',
      key: 'high',
      level: 3,
    },
    {
      name: 'Severity Middle',
      key: 'middle',
      level: 2,
    },
    {
      name: 'Severity Low',
      key: 'low',
      level: 1,
    },
  ];
  private readonly destroy$ = new Subject<void>();

  constructor(private store: MalwaresStore, private organizationService: OrganizationService) {}

  ngOnInit() {
    this.organizationService
      .getCurrentContext()
      .pipe(takeUntil(this.destroy$), take(1))
      .subscribe((context) => {
        this.activeModule = context.currentModule;
        this.activeOrganization = context.currentOrganization;
      });

    this.store.state$.pipe(takeUntil(this.destroy$)).subscribe((data) => {
      if (data) {
        this.malwareId = data.malwareId;
        this.signatures = data.signatures;
        this.signatureList = this.sortByRisk(this.signatures);
      }
    });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  getCertificatesLink() {
    if (this.malwareId) {
      return `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares/${this.malwareId}/certificates`;
    }
  }

  private sortByRisk(signatures) {
    const orderedSigs = {
      high: [],
      middle: [],
      low: [],
    };
    for (const item of signatures) {
      switch (item.severity) {
        case 1:
          if (item.name === 'Signed executable') {
            item.marks = [];
          }
          orderedSigs.low.push(item);
          break;
        case 2:
          orderedSigs.middle.push(item);
          break;
        default:
          orderedSigs.high.push(item);
      }
    }
    return orderedSigs;
  }

  private getSeverityColor(severity) {
    if (severity === 2) {
      return 'signature-accordion--warning';
    }
    if (severity >= 3) {
      return 'signature-accordion--danger';
    }
    return 'signature-accordion--primary';
  }

  private prettyPrintMarks(data) {
    let out = '';
    if (!data) {
      return out;
    }
    for (const value of data) {
      if (value.type === 'call') {
        out = out + this.printCall(value);
      }
      if (value.type === 'ioc') {
        out = out + this.printIOC(value);
      }
      if (value.type === 'volatility') {
        out = out + this.printVolatility(value);
      }
      if (value.type === 'generic') {
        out = out + this.printGeneric(value);
      }
    }
    return out;
  }

  private printCall(data) {
    let html = '<hr>';
    html = html + '<b>PID: </b>' + data.pid + ' / <b>CID:</b>' + data.cid + '<br>';
    html = html + '<b>API: </b>' + data.call.api + ' / <b>API Category:</b>' + data.call.category + '<br>';
    html = html + '<b>Return Value: </b>' + data.call.return_value + '<br>';
    return html;
  }

  private printIOC(data) {
    let html = '<hr>';
    html = html + '<b>Category: </b>' + data.category + '<br>';
    if (data.description != null) {
      html = html + '<b>Description: </b>' + data.description + '<br>';
    }
    html = html + '<b>IOC: </b>' + data.ioc;
    return html;
  }

  private printVolatility(data) {
    let html = '<hr>';
    html = html + '<b>Plugin: </b>' + data.plugin + '<br>';
    html = html + '<b>PID Count: </b>' + data.pidcount + '<br>';
    return html;
  }

  private printGeneric(data) {
    let html = '<hr>';
    if (data.hasOwnProperty('section')) {
      if (data.section instanceof Object && data.hasOwnProperty('entropy')) {
        html = html + '<b>Section Name: </b>' + data.section.name + '<br>';
        html = html + '<b>Section Entropy: </b>' + data.section.entropy + '<br>';
        html = html + '<b>Section VA: </b>' + data.section.virtual_address + '<br>';
      } else {
        html = html + '<b>Section: </b>' + data.section + '<br>';
      }
    }
    /*if (data.hasOwnProperty('entropy')) {
      html = html + '<b>Entropy:</b>' + data.entropy + '<br>';
    }*/
    html = html + '<b>Description: </b>' + data.description + '<br>';
    return html;
  }
}
