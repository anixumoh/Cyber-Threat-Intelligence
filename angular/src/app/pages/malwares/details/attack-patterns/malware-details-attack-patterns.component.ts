import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
import { MalwaresStore } from '../malwares-store';
import { OrganizationService } from '../../../../dashboard/organization/organization.service';

@Component({
  selector: 'app-malware-details-attack-patterns',
  templateUrl: './malware-details-attack-patterns.component.html',
})
export class MalwareDetailsAttackPatternsComponent implements OnInit, OnDestroy {
  attackPatterns = [];
  activeModule = {};
  activeOrganization = {};
  private readonly destroy$ = new Subject<void>();

  constructor(private store: MalwaresStore, private organizationService: OrganizationService) {}

  ngOnInit() {
    this.organizationService
      .getCurrentContext()
      .pipe(takeUntil(this.destroy$), take(1))
      .subscribe((context) => {
        this.activeModule = context.currentModule;
        this.activeOrganization = context.currentOrganization;
      });

    this.store.state$
      .pipe(
        takeUntil(this.destroy$),
        filter((item) => !!item),
        take(1)
      )
      .subscribe((data) => {
        if (data && data.blueliv) {
          const ioa = data.blueliv.ioa;
          this.attackPatterns = ioa.attack_patterns || [];
          this.attackPatterns.sort((a, b) => (a.name > b.name ? 1 : -1));
        }
      });
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}
