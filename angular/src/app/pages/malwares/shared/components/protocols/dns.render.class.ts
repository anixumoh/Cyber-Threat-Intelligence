import { ElementRef } from '@angular/core';
import { ICONS } from './dns.icons.component';
import * as go from 'gojs';

export class DNSTreeRender {

  links = [];
  nodes = [];

  constructor(public element: ElementRef) {}

  private getIcon(iconType) {
    // A data binding conversion function. Given an name, return the Geometry.
    // If there is only a string, replace it with a Geometry object,
    // which can be shared by multiple Shapes.

    var newIcon = ICONS["default"];
    if (ICONS.hasOwnProperty(iconType)){
      newIcon = ICONS[iconType];
    }
    return go.Geometry.parse(newIcon, true);
  }

  public render(nodes,links){
    this.nodes = nodes;
    this.links = links;

    const $ = go.GraphObject.make;  // for conciseness in defining templates
    const myDiagram: go.Diagram = $(go.Diagram, this.element.nativeElement,
      {
        allowCopy: false,
        "draggingTool.dragsTree": true,
        "commandHandler.deletesTree": true,
        maxSelectionCount: 1, // users can select only one part at a time
        "toolManager.hoverDelay": 10,  // how quickly tooltips are shown
        initialContentAlignment: go.Spot.Center,  // center the content
        "undoManager.isEnabled": true,
        layout:
          $(go.TreeLayout,
            { angle: 90 }),
      });

    myDiagram.nodeTemplate =  // the default node template
      $(go.Node, "Vertical",
        {
          deletable: false,
        },
        // The main element of the panel is a vertical panel housing a:
        // ICON - TEXT - Expand button,
        $(go.Panel, "Vertical",
          $(go.Shape,
            {
              name: 'icon',
              width: 2, height: 2,
              stroke: null, strokeWidth: 0,
              fill: "#41BFEC" /* blue */
            },
            new go.Binding("fill", "color"),
            new go.Binding("width", "iconWidth"),
            new go.Binding("height", "iconHeight"),
            new go.Binding("geometry", "icon", this.getIcon)
          ),
          $(go.TextBlock,
            { margin: new go.Margin(3, 0, 0, 0),
              maxSize: new go.Size(100, 30),
              font: "bold 10pt sans-serif"
            },
            new go.Binding("text", "label")
          ),
        )
      );

    myDiagram.linkTemplate =
      $(go.Link, go.Link.Orthogonal,
        { deletable: false, corner: 10 },
        $(go.Shape,
          { strokeWidth: 3 }
        ),
        $(go.TextBlock, go.Link.OrientUpright,
          {
            background: "white",
            visible: false,  // unless the binding sets it to true for a non-empty string
            segmentIndex: -2,
            segmentOrientation: go.Link.None
          },
          new go.Binding("text", "label"),
          // hide empty string;
          // if the "answer" property is undefined, visible is false due to above default setting
          new go.Binding("visible", "label", function(a) { return (a ? true : false); })
        )
      );

    // create the Model with the above data, and assign to the Diagram
    myDiagram.model =
      $(go.GraphLinksModel,
        { nodeDataArray: this.nodes,
          linkDataArray: this.links
        }
      );
  }
}



