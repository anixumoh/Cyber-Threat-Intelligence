import { take } from 'rxjs/operators';
import { Component, OnInit } from '@angular/core';
import { MalwaresStore } from '../malwares-store';
import { OrganizationService } from '../../../../dashboard/organization/organization.service';
import * as moment from 'moment';
import { ToolsService } from '../../../../core/models/tools.service';
import { Router } from '@angular/router';
import { DecimalPipe } from '@angular/common';

@Component({
  selector: 'app-malware-details-summary',
  templateUrl: './malware-details-summary.component.html',
  styleUrls: ['./malware-details-summary.component.scss'],
})
export class MalwareDetailsSummaryComponent implements OnInit {
  malwareId = '';
  status: '';
  malwareType = '';
  fileType = '';
  cerberus;
  entries = [];
  logs: any;
  signatures;
  malwareTypes = [];
  toolId;
  version = '';
  versionName = '';
  match = {};
  showModal = false;
  modalData = {
    title: 'Analysis Logs',
    content: '',
  };
  activeModule;
  activeOrganization;
  summary: any;
  crimeservers = { CnC: [], binary_downloads: [], other_urls: [] };
  istcctiplabs = false;

  constructor(
    private malwaresStore: MalwaresStore,
    private toolsService: ToolsService,
    private router: Router,
    private organizationService: OrganizationService,
    private decimalPipe: DecimalPipe
  ) {}

  ngOnInit() {
    this.istcctiplabs = location.hostname === 'tcctiplabs.blueliv.com';
    this.organizationService
      .getCurrentContext()
      .pipe(take(1))
      .subscribe((context) => {
        this.activeModule = context.currentModule;
        this.activeOrganization = context.currentOrganization;
      });

    this.malwaresStore.state$.subscribe((response) => {
      if (response) {
        this.summary = response;
        const { blueliv, info, target, debug, signatures } = response;
        this.malwareId = response.malwareId;
        this.signatures = blueliv.malicious;
        this.malwareType = blueliv.malware_type;
        this.malwareTypes = blueliv.malware_types;
        this.version = blueliv.subType.version;
        this.versionName = blueliv.subType.name;
        this.match = blueliv.match.yara;
        this.fileType = target.file.type;
        this.status = blueliv.status;
        this.logs = {
          errors: debug ? debug.errors : [],
          analysis: debug ? debug.log : [],
        };
        this.lookForToolId(this.malwareType.toLowerCase());
        if (
          blueliv &&
          blueliv?.cerberus &&
          blueliv.cerberus.hasOwnProperty('probabilities') &&
          Object.keys(blueliv.cerberus.probabilities).length
        ) {
          const cerberusValue =
            blueliv.cerberus.probabilities?.malicious != null ? blueliv.cerberus.probabilities.malicious * 100 : 'N/A';
          this.cerberus =
            typeof cerberusValue === 'number'
              ? `${this.decimalPipe.transform(cerberusValue, '1.2-8')} %`
              : cerberusValue;
        } else {
          if (this.signatures === 'UNKNOWN') {
            this.cerberus = 'N/A';
          }
          if (this.signatures === 'SUSPICIOUS') {
            this.cerberus = '25%';
          }
          if (this.signatures === 'MALICIOUS' || this.malwareType !== 'UNCLASSIFIED') {
            this.cerberus = signatures.some((signature) => signature.name === 'Classified by Blueliv') ? '100%' : '70%';
          }
        }
        this.crimeservers = blueliv.crimeservers;
        this.getEntries({ info, target, blueliv });
      }
    });
  }

  seenDatesUpdate({ firstSeen, lastSeen }) {
    this.entries.splice(11, 0, {
      title: 'First Seen',
      value: firstSeen ? firstSeen.format('DD/MM/YYYY HH:mm (Z)') : '-',
      icon: 'icon-clock bg-primary',
    });
    this.entries.splice(12, 0, {
      title: 'Last Seen',
      value: lastSeen ? lastSeen.format('DD/MM/YYYY HH:mm (Z)') : '-',
      icon: 'icon-clock bg-primary',
    });
  }

  closeModal() {
    this.showModal = false;
  }

  openModal() {
    this.showModal = true;
  }

  loadAnalysisLogs() {
    this.modalData['title'] = 'Analysis Logs';
    this.modalData['content'] = this.logs.analysis;
    if (Array.isArray(this.logs.analysis)) {
      this.modalData['content'] = this.logs.analysis.join(' ');
    }
    this.openModal();
  }

  loadErrorLogs() {
    this.modalData['title'] = 'Error Logs';
    this.modalData['content'] = this.logs.errors.join(' ');
    this.openModal();
  }

  getEntries({ info, target, blueliv }) {
    const offset = moment().utcOffset();
    const compilationTime =
      blueliv.ioa.metadata && blueliv.ioa.metadata.pe_timestamp
        ? `${moment(blueliv.ioa.metadata.pe_timestamp).format('DD/MM/YYYY HH:mm:ss')}`
        : '';
    const signingDate =
      blueliv.ioa.metadata && blueliv.ioa.metadata.signing_date
        ? moment.utc(blueliv.ioa.metadata.signing_date).utcOffset(offset).format('DD/MM/YYYY HH:mm:ss (Z)')
        : '';
    const peidSignatures =
      blueliv.ioa.metadata && blueliv.ioa.metadata.peid_signatures
        ? (blueliv.ioa.metadata.peid_signatures || []).join(', ')
        : '';
    const lastAnalysisDate = info.started || info.ended || null;
    const lastAnalysisDateFormated = lastAnalysisDate ? moment(lastAnalysisDate).format('DD/MM/YYYY HH:mm (Z)') : '';
    const analysisDuration =
      info.duration !== undefined && info.duration !== '-1' && info.duration !== -1 ? `${info.duration}s` : '-';
    this.entries = [
      {
        title: 'Malware Types',
        value: (this.malwareTypes || []).join(', '),
        icon: 'icon-layers bg-primary',
      },
      { title: 'Filename', value: target.file.name, icon: 'icon-list bg-primary' },
      { title: 'File Type', value: target.file.type, icon: 'icon-list bg-primary' },
      {
        title: 'Size',
        value: `${target.file.size} bytes`,
        icon: 'icon-folder-solid bg-primary',
      },
      { title: 'MD5', value: target.file.md5, icon: 'icon-desktop_windows bg-primary' },
      { title: 'SHA1', value: target.file.sha1, icon: 'icon-desktop_windows bg-primary' },
      { title: 'SHA256', value: target.file.sha256, icon: 'icon-desktop_windows bg-primary' },
      { title: 'SSDEEP', value: target.file.ssdeep, icon: 'icon-desktop_windows bg-primary' },
      {
        title: 'IMPHASH',
        value: blueliv.ioa.metadata.pe_imphash,
        icon: 'icon-desktop_windows bg-primary',
      },
      {
        title: 'Analysis Duration',
        value: analysisDuration,
        icon: 'icon-clock bg-primary',
      },
      {
        title: 'Last Analysis',
        value: lastAnalysisDateFormated,
        icon: 'icon-clock bg-primary',
      },
    ];

    if (compilationTime) {
      this.entries.push({
        id: 'ct',
        title: 'Compilation Time',
        value: compilationTime,
        icon: 'icon-clock bg-primary',
        queryParams: { dork: `ioa.metadata.pe_timestamp.keyword:"${blueliv.ioa.metadata.pe_timestamp}"` },
        link: `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares`,
        tooltip:
          'The compilation time is extracted from the (PE/COFF header | https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header) and it indicates the local time of the system where it was compiled / created. This information can give hints of the creator timezone but it can be tampered too.',
      });
    }

    if (signingDate) {
      this.entries.push({
        title: 'Signing date',
        value: signingDate,
        icon: 'icon-clock bg-primary',
        queryParams: { dork: `ioa.metadata.signing_date.keyword:"${blueliv.ioa.metadata.signing_date}"` },
        link: `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares`,
      });
    }

    if (blueliv.ioa.certificates && blueliv.ioa.certificates.length > 0) {
      this.entries.push({
        title: 'Signed Binary',
        value: 'See Certificates',
        icon: 'icon-clock bg-primary',
        link: `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares/${this.malwareId}/certificates`,
      });
    }

    if (blueliv.packer) {
      this.entries.push({
        title: 'Packer',
        value: blueliv.packer,
        icon: 'icon-desktop_windows bg-primary',
        queryParams: { dork: `ioa.packer.keyword:"${blueliv.packer}"` },
        link: `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares`,
      });
    }

    this.entries.push({
      title: 'PEiD Signatures',
      value: peidSignatures,
      icon: 'icon-desktop_windows bg-primary',
    });

    const pdbPath =
      blueliv.ioa.path && blueliv.ioa.path.pdb_path && blueliv.ioa.path.pdb_path.length > 0
        ? blueliv.ioa.path.pdb_path[0]
        : '';
    if (pdbPath) {
      const pdbCount = blueliv.ioa.path.pdb_path.length;
      const pdbEntry: any = {
        title: `PDB Path ${pdbCount > 1 ? `(${pdbCount})` : ''}`,
        value: pdbPath || '-',
        icon: 'icon-desktop_windows bg-primary',
      };
      if (pdbPath && pdbCount === 1) {
        pdbEntry.queryParams = { dork: `ioa.path.pdb_path.keyword:"${pdbPath}"` };
        pdbEntry.link = `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares`;
      } else {
        pdbEntry.queryParams = { ioaActiveSection: 'path' };
        pdbEntry.link = `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/malwares/${this.malwareId}/ioa`;
      }
      this.entries.push(pdbEntry);
    }

    if (this.istcctiplabs) {
      this.entries = this.entries.concat([
        { title: 'Status', value: this.status, icon: 'icon-power bg-danger' },
        { title: 'Analysis finished at', value: info.ended, icon: 'icon-clock bg-primary' },
        { title: 'VM Analysis type', value: info.category, icon: 'icon-layers bg-primary' },
        {
          title: 'VM Name',
          value: info && info.machine ? info.machine.name : '',
          icon: 'icon-desktop_windows bg-primary',
        },
        { title: 'VM Node', value: info.hostname, icon: 'icon-desktop_windows bg-primary' },
        { title: 'VM Management IP', value: info.public_ip, icon: 'icon-globe bg-primary' },
        { title: 'VM Public VPN IP', value: info.vpn_ip, icon: 'icon-globe bg-primary' },
      ]);
    }
  }

  getRedirectToToolsLink() {
    return `/dashboard/organizations/${this.activeOrganization.id}/modules/${this.activeModule.id}/threat_context/tools/${this.toolId}`;
  }

  private lookForToolId(toolName) {
    if (toolName) {
      this.toolsService
        .list({ dork: `name:"${toolName}"` })
        .pipe(take(1))
        .subscribe((response) => {
          if (response.data) {
            const items = response.data.map(({ id, attributes }) => ({ id, ...attributes }));
            for (const item of items) {
              if (item.name.toLowerCase() === toolName.toLowerCase()) {
                this.toolId = item.id;
                break;
              }
            }
          }
        });
    }
  }
}
