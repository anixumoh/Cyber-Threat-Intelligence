import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';

@Component({
  selector: 'app-malware-details-process-behavior',
  templateUrl: './process-behavior.component.html'
})
export class MalwareProcessBehavior implements OnInit, OnChanges {

  @Input() selectedItem;

  public files = {};
  public directory = {};
  public registry = {};
  public apiStats = {};
  public hooks = [];
  public dllLoaded = [];
  public mutexes = [];
  public apiCalls = [];

  constructor() {
  }

  ngOnInit() {
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes.hasOwnProperty('selectedItem')) {
      this.cleanData();
      this.prepareData();
    }
  }

  private cleanData() {
    this.files = {};
    this.directory = {};
    this.registry = {};
    this.apiStats = {};
    this.apiCalls = [];
    this.hooks = [];
    this.dllLoaded = [];
    this.mutexes = [];
  }

  private prepareData() {
    if (this.selectedItem.hasOwnProperty('apistats')) {
      this.apiStats = this.selectedItem['apistats'];
    }
    if (this.selectedItem.hasOwnProperty('apicalls')) {
      this.apiCalls = this.selectedItem['apicalls'];
    }
    if (this.selectedItem.hasOwnProperty('summary')) {
      let summary = this.selectedItem['summary'];
      if (summary.hasOwnProperty('file_created')) {
        this.files['created'] = summary['file_created'];
      }
      if (summary.hasOwnProperty('file_deleted')) {
        this.files['deleted'] = summary['file_deleted'];
      }
      if (summary.hasOwnProperty('file_read')) {
        this.files['read'] = summary['file_read'];
      }
      if (summary.hasOwnProperty('file_exists')) {
        this.files['exists'] = summary['file_exists'];
      }
      if (summary.hasOwnProperty('file_opened')) {
        this.files['opened'] = summary['file_opened'];
      }
      if (summary.hasOwnProperty('regkey_opened')) {
        this.registry['opened'] = summary['regkey_opened'];
      }
      if (summary.hasOwnProperty('regkey_read')) {
        this.registry['read'] = summary['regkey_read'];
      }
      if (summary.hasOwnProperty('regkey_written')) {
        this.registry['written'] = summary['regkey_written'];
      }
      if (summary.hasOwnProperty('windows_hooks')) {
        this.hooks = summary['windows_hooks'];
      }
      if (summary.hasOwnProperty('dll_loaded')) {
        this.dllLoaded = summary['dll_loaded'];
      }
      if (summary.hasOwnProperty('mutex')) {
        this.mutexes = summary['mutex'];
      }
      if (summary.hasOwnProperty('directory_created')) {
        this.directory['created'] = summary['directory_created'];
      }
      if (summary.hasOwnProperty('directory_removed')) {
        this.directory['removed'] = summary['directory_removed'];
      }
      if (summary.hasOwnProperty('directory_enumerated')) {
        this.directory['enumerated'] = summary['directory_enumerated'];
      }
    }
  }
}


