import { Component, OnInit, Input, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { DNSTreeRender } from './dns.render.class';
import * as go from 'gojs';

@Component({
  selector: 'app-malware-details-network-dns',
  templateUrl: './dns.component.html'
})
export class NetworkDns implements OnInit, AfterViewInit {
  @Input() data;
  @ViewChild('DNSTreeDiv') element: ElementRef;

  private nodes = [];
  private links = [];

  constructor() {}

  ngOnInit() {
    if (this.hasDns()) {
      this.prepareTreeData();
    }
  }

  ngAfterViewInit() {
    if (this.hasDns()) {
      this.renderTree();
    }
  }

  hasDns() {
    return this.data && this.data.hasOwnProperty('dns') && this.data.dns.length > 0;
  }

  private processAnswers(parent, answers) {
    // for each answer we should add nodes
    // and links within parent and child nodes.
    let index = 0;
    for (const answer of answers) {
      const child_node_id = parent + '_answer_' + index.toString();
      this.nodes.push({
        key: child_node_id,
        label: answer.data.toLowerCase(),
        type: answer.type.toLowerCase(),
        icon: answer.type.toLowerCase(),
        color: 'lightblue'
      });

      this.links.push({
        from: parent,
        to: child_node_id,
        label: answer.type
      });
      index = index + 1;
    }
  }

  private prepareTreeData() {
    let index = 0;

    for (const dns of this.data.dns) {
      const domain_value = dns.request;
      const node_id = 'dom_' + index.toString();
      // Add parent nodes
      this.nodes.push({
        key: node_id,
        label: domain_value.toString().toLowerCase(),
        type: 'domain',
        icon: 'domain',
        color: 'lightblue',
        iconWidth: 30,
        iconHeight: 30,
        portHeight: 15
      });

      const answers = dns.answers;
      this.processAnswers(node_id, answers);
      index = index + 1;
    }
  }

  private renderTree() {
    const dnsGraph = new DNSTreeRender(this.element);
    dnsGraph.render(this.nodes, this.links);
  }
}
